@startuml FASE_01_FUNDAMENTOS
!theme plain
skinparam backgroundColor #F8F9FA
skinparam classFontSize 12
skinparam classAttributeFontSize 11
skinparam stereotypeCBackgroundColor #E3F2FD
skinparam classBackgroundColor #FFFFFF
skinparam classBorderColor #2196F3

title üéì FASE 1: FUNDAMENTOS - ARQUITECTURA PROCEDURAL\nLo que YA construiste (Programaci√≥n Estructurada)

package "com.forestech" <<Rectangle>> #E8F5E9 {

    class Main <<Orquestador>> {
        {static} +main(String[] args) : void
        --
        **FLUJO PRINCIPAL:**
        1. Mostrar banner
        2. Mostrar men√∫
        3. Capturar opci√≥n
        4. Procesar seg√∫n opci√≥n
        5. Si opci√≥n 1 o 2:
           - Capturar tipo combustible
           - Capturar cantidad
           - Capturar precio
           - Validar movimiento
           - Mostrar resumen
    }

    class BannerMenu <<Utilidad>> {
        {static} +header() : void
        --
        **Responsabilidad:**
        Mostrar encabezado ASCII art
        del programa
    }

    class MenuHelper <<L√≥gica de Men√∫>> {
        {static} +displayMenu() : void
        {static} +proccessMenuOption(int) : void
        {static} +validateMovementType(String) : void
        --
        **Responsabilidad:**
        - Mostrar opciones del men√∫
        - Procesar la opci√≥n seleccionada
        - Validar tipo de movimiento
    }

    class InputHelper <<Captura de Datos>> {
        {static} -scanner : Scanner
        --
        {static} +readInt(String prompt) : int
        {static} +readDouble(String prompt) : double
        {static} +readString(String prompt) : String
        {static} +readFuelType() : String
        --
        **Responsabilidad:**
        Centralizar toda la captura
        de entrada del usuario
    }

    class DataDisplay <<Visualizaci√≥n>> {
        {static} +showFuelTypes() : void
        {static} +showMenuWithForEach(String[]) : void
        {static} +simulateProcessing(int) : void
        --
        **Responsabilidad:**
        Mostrar informaci√≥n formateada
        al usuario (tablas, listas)
    }

    class MovementCalculator <<L√≥gica de Negocio>> {
        {static} +IVA : double = 0.19
        {static} +TXTCALCULO : String
        --
        {static} +calculateSubtotal(double, double) : double
        {static} +calculateIVA(double) : double
        {static} +calculateTotal(double, double) : double
        {static} +isValidMovement(String, double, double) : boolean
        {static} +isBigPurchase(double) : boolean
        {static} +requiresApproval(String, double, double) : boolean
        {static} +printMovementSummary(String, double, double) : void
        --
        **Responsabilidad:**
        Realizar TODOS los c√°lculos
        relacionados con movimientos
    }

    class AppConfig <<Configuraci√≥n>> {
        {static} +APP_NAME : String
        {static} +VERSION : String
        {static} +DB_CONNECTION : String
        --
        **Responsabilidad:**
        Almacenar constantes
        del sistema
    }

    class Movement <<Clase Vac√≠a>> {
        +Movement()
        --
        **Estado:**
        Solo constructor vac√≠o
        (se desarrollar√° en Fase 2)
        --
        ‚ö†Ô∏è NO SE USA A√öN
    }
}

' Relaciones de dependencia (Main orquesta todo)
Main ..> BannerMenu : << usa >>
Main ..> MenuHelper : << usa >>
Main ..> InputHelper : << usa >>
Main ..> MovementCalculator : << usa >>

InputHelper ..> DataDisplay : << usa >>
MovementCalculator ..> DataDisplay : << podr√≠a usar >>

note right of Main
  **PATR√ìN: Programaci√≥n Procedural**

  ‚úÖ **Ventajas que aprendiste:**
  - Separaci√≥n de responsabilidades
  - M√©todos est√°ticos reutilizables
  - C√≥digo organizado en clases

  ‚ö†Ô∏è **Limitaciones:**
  - Variables sueltas (no persisten)
  - No hay "objetos Movement"
  - Datos y comportamiento separados
  - Dif√≠cil manejar m√∫ltiples movimientos

  üéØ **Pr√≥ximo paso:** POO (Fase 2)
end note

note bottom of Movement
  **Clase preparada para Fase 2**

  Por ahora est√° vac√≠a, pero en
  la Fase 2 se convertir√° en el
  **coraz√≥n del sistema**.
end note

note top of MovementCalculator
  **üîÑ Esta clase EVOLUCIONAR√Å:**

  Fase 1: M√©todos est√°ticos
  Fase 2: Sus m√©todos se mover√°n
          a la clase Movement
  Fase 5: Probablemente se elimine
end note

legend right
  |<#E3F2FD>| << Orquestador >> | Controla el flujo principal |
  |<#FFF3E0>| << L√≥gica de Negocio >> | C√°lculos y validaciones |
  |<#E8F5E9>| << Utilidad >> | Funciones auxiliares |
  |<#FCE4EC>| << Clase Vac√≠a >> | Preparada para evolucionar |

  **Conceptos Java aplicados:**
  ‚úÖ Variables primitivas (int, double)
  ‚úÖ Strings y concatenaci√≥n
  ‚úÖ Condicionales (if/else, switch)
  ‚úÖ Bucles (for, while, for-each)
  ‚úÖ Arrays
  ‚úÖ M√©todos est√°ticos
  ‚úÖ Clases como contenedores de m√©todos
  ‚úÖ Scanner para entrada
  ‚úÖ Validaciones b√°sicas
end legend

@enduml

