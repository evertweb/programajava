@startuml FASE_02_POO
!theme plain
skinparam backgroundColor #F8F9FA
skinparam classFontSize 12
skinparam classAttributeFontSize 11
skinparam stereotypeCBackgroundColor #E3F2FD
skinparam classBackgroundColor #FFFFFF
skinparam classBorderColor #4CAF50

title üöÄ FASE 2: POO - ARQUITECTURA ORIENTADA A OBJETOS\nLo que VAS a construir (Evoluci√≥n de Fase 1)

package "com.forestech" <<Rectangle>> #E8F5E9 {

    class Main <<Orquestador>> {
        {static} +main(String[] args) : void
        --
        **FLUJO EVOLUCIONA A:**
        1. Mostrar banner
        2. Mostrar men√∫
        3. Capturar opci√≥n
        4. Si opci√≥n 1 o 2:
           - **Crear objeto Movement**
           - Capturar datos del usuario
           - **Movement calcula autom√°ticamente**
           - **Movement se valida a s√≠ mismo**
           - **Movement se muestra a s√≠ mismo**
        5. **Guardar Movement en ArrayList**
    }

    class BannerMenu <<Utilidad>> {
        {static} +header() : void
        --
        **Sin cambios**
        (sigue igual que Fase 1)
    }

    class MenuHelper <<L√≥gica de Men√∫>> {
        {static} +displayMenu() : void
        {static} +processMenuOption(int) : void
        {static} +validateMovementType(String) : void
        --
        **Cambios menores:**
        - Ahora trabaja con objetos Movement
        - Agrega opci√≥n "Listar movimientos"
    }

    class InputHelper <<Captura de Datos>> {
        {static} -scanner : Scanner
        --
        {static} +readInt(String) : int
        {static} +readDouble(String) : double
        {static} +readString(String) : String
        {static} +readFuelType() : String
        --
        **Sin cambios significativos**
    }

    class DataDisplay <<Visualizaci√≥n>> {
        {static} +showFuelTypes() : void
        {static} +showMenuWithForEach(String[]) : void
        {static} +simulateProcessing(int) : void
        {static} +showMovementsList(ArrayList<Movement>) : void
        --
        **NUEVO:**
        + M√©todo para mostrar lista de movimientos
    }

    class AppConfig <<Configuraci√≥n>> {
        {static} +APP_NAME : String
        {static} +VERSION : String
        {static} +DB_CONNECTION : String
        {static} +IVA : double = 0.19
        --
        **Cambio:**
        IVA se mueve aqu√≠ desde
        MovementCalculator
    }

    class Movement <<‚≠ê CLASE PRINCIPAL - AHORA ACTIVA>> {
        ' Atributos (estado del objeto)
        -id : String
        -type : String
        -fuelType : String
        -quantity : double
        -pricePerUnit : double
        -subtotal : double
        -iva : double
        -total : double
        -timestamp : LocalDateTime
        --
        ' Constructores
        +Movement()
        +Movement(type, fuelType, quantity, pricePerUnit)
        --
        ' Getters
        +getId() : String
        +getType() : String
        +getFuelType() : String
        +getQuantity() : double
        +getPricePerUnit() : double
        +getSubtotal() : double
        +getIva() : double
        +getTotal() : double
        +getTimestamp() : LocalDateTime
        --
        ' Setters
        +setType(String) : void
        +setFuelType(String) : void
        +setQuantity(double) : void
        +setPricePerUnit(double) : void
        --
        ' M√©todos de negocio (antes en MovementCalculator)
        +calculateSubtotal() : void
        +calculateIVA() : void
        +calculateTotal() : void
        +isValidMovement() : boolean
        +isBigPurchase() : boolean
        +requiresApproval() : boolean
        --
        ' M√©todos de utilidad
        +toString() : String
        +printSummary() : void
        +generateId() : String
        --
        **RESPONSABILIDAD:**
        Encapsular TODOS los datos
        y comportamientos de un
        movimiento de combustible
    }

    class MovementCalculator <<‚ö†Ô∏è DEPRECADA - SE ELIMINAR√Å>> {
        {static} +calculateSubtotal(double, double) : double
        {static} +calculateIVA(double) : double
        {static} +calculateTotal(double, double) : double
        --
        **Estado:**
        Esta clase ya NO se usa.
        Sus m√©todos se movieron
        a la clase Movement.
        --
        üóëÔ∏è **Se eliminar√° en Fase 3**
    }
}

' Relaciones (NUEVAS - Orientadas a Objetos)
Main ..> BannerMenu : << usa >>
Main ..> MenuHelper : << usa >>
Main ..> InputHelper : << usa >>
Main --> Movement : << crea y gestiona >>
Main --> "0..*" Movement : almacena en ArrayList

MenuHelper ..> Movement : << procesa >>
DataDisplay ..> Movement : << muestra >>

Movement ..> AppConfig : << usa constantes >>

note right of Movement
  **‚≠ê ESTRELLA DE LA FASE 2**

  ‚úÖ **Evoluci√≥n de Fase 1:**
  - Antes: variables sueltas
  - Ahora: objeto con estado

  ‚úÖ **Principios POO aplicados:**
  - **Encapsulamiento:** atributos privados
  - **Abstracci√≥n:** interfaz p√∫blica clara
  - **Cohesi√≥n:** todo relacionado con
    Movement est√° en una clase

  üéØ **Ventajas:**
  - Datos y comportamiento juntos
  - F√°cil crear m√∫ltiples movimientos
  - Cada objeto se valida a s√≠ mismo
  - C√≥digo m√°s mantenible
end note

note left of Main
  **CAMBIO PRINCIPAL EN MAIN:**

  **Antes (Fase 1):**
  ```java
  double cantidad = InputHelper.readDouble();
  double precio = InputHelper.readDouble();
  double total = MovementCalculator.calculate(...);
  System.out.println("Total: " + total);
  ```

  **Ahora (Fase 2):**
  ```java
  Movement mov = new Movement();
  mov.setQuantity(InputHelper.readDouble());
  mov.setPricePerUnit(InputHelper.readDouble());
  mov.calculateTotal();
  mov.printSummary();

  // ¬°Guardar para usar despu√©s!
  movements.add(mov);
  ```
end note

note bottom of MovementCalculator
  **‚ö†Ô∏è MIGRACI√ìN:**

  Los m√©todos est√°ticos de esta clase
  se convierten en m√©todos de instancia
  en Movement.

  **Ejemplo:**
  MovementCalculator.calculateTotal(qty, price)
  ‚¨áÔ∏è
  movement.calculateTotal()
end note

legend right
  |<#E3F2FD>| << Orquestador >> | Controla el flujo principal |
  |<#C8E6C9>| << Clase Principal >> | Coraz√≥n del sistema (POO) |
  |<#E8F5E9>| << Utilidad >> | Funciones auxiliares |
  |<#FFCCBC>| << Deprecada >> | Se eliminar√° pr√≥ximamente |

  **Conceptos POO que aprender√°s:**
  üÜï Atributos de instancia (private)
  üÜï Constructores (con par√°metros)
  üÜï Getters y Setters (encapsulamiento)
  üÜï M√©todos de instancia (no static)
  üÜï this (referencia al objeto actual)
  üÜï toString() override
  üÜï LocalDateTime (API moderna)
  üÜï ArrayList<Movement> (colecciones tipadas)
  üÜï Generaci√≥n de IDs √∫nicos

  **Reutilizas de Fase 1:**
  ‚úÖ Validaciones
  ‚úÖ C√°lculos matem√°ticos
  ‚úÖ L√≥gica de negocio
end legend

@enduml

